version: '3.5'

services:
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    networks:
      - milvus

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/minio:/minio_data
    command: minio server /minio_data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - milvus

  standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.2.11
    command: ["milvus", "run", "standalone"]
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "etcd"
      - "minio"
    networks:
      - milvus

  nginx:
    restart: always
    image: nginx:latest
    container_name: nginx-proxy
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx:/etc/nginx/conf.d:ro
      - /home/ubuntu/nginx_log:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - web_network

  mysql:
    image: mysql:latest
    container_name: mysql-db
    environment:
      - MYSQL_DATABASE
      - MYSQL_ROOT_PASSWORD
    command: ['mysqld', '--character-set-server=utf8mb4', '--collation-server=utf8mb4_unicode_ci']
    expose:
      - "3306"
    volumes:
      - "/home/ubuntu/mysql_data:/var/lib/mysql"
    networks:
      - db_network

  backend:
    restart: always
    build: ./backend
    container_name: backend-service
    expose:
      - "5000"
    command: ["python3", "app.py"]
    depends_on:
      - mysql
      - standalone
    networks:
      - web_network
      - db_network
      - milvus
  
  frontend:
    restart: always
    container_name: frontend
    build: ./chat
    ports:
      - "3000:3000"
    volumes:
      - .:/my-space
    networks:
      - web_network

networks:
  milvus:
    driver: bridge
  web_network:
    driver: bridge
  db_network:
    driver: bridge